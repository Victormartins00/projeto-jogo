class Mapa {
    // ... (restante do c贸digo)

    private void preencherBordas() {
        for (int i = 0; i < linhas; i++) {
            for (int j = 0; j < colunas; j++) {
                if (i == 0 || i == linhas - 1 || j == 0 || j == colunas - 1) {
                    matriz[i][j] = TipoTerreno.ASTERISCO;
                } else {
                    matriz[i][j] = TipoTerreno.VAZIO;
                }
            }
        }
    }

    // ... (restante do c贸digo)

    public void moverJogador() {
        System.out.println("Mova o jogador: W A S D");
        String movimento = scanner.nextLine();

        int novaPosXJogador = posXJogador;
        int novaPosYJogador = posYJogador;

        switch (movimento.toLowerCase()) {
            case "a":
                novaPosYJogador = Math.max(posYJogador - 1, 1); // Evitar borda
                break;
            case "d":
                novaPosYJogador = Math.min(posYJogador + 1, colunas - 2); // Evitar borda
                break;
            case "w":
                novaPosXJogador = Math.max(posXJogador - 1, 1); // Evitar borda
                break;
            case "s":
                novaPosXJogador = Math.min(posXJogador + 1, linhas - 2); // Evitar borda
                break;
        }

        if (matriz[novaPosXJogador][novaPosYJogador] == TipoTerreno.FLORESTA) {
            recursosColetados++;
            System.out.println("Recurso coletado! Total de recursos: " + recursosColetados);
        }

        matriz[posXJogador][posYJogador] = TipoTerreno.VAZIO;
        posXJogador = novaPosXJogador;
        posYJogador = novaPosYJogador;
        matriz[posXJogador][posYJogador] = TipoTerreno.JOGADOR;

        imprimirMapa(); // Adicionado para exibir o mapa ap贸s cada movimento
    }

    // ... (restante do c贸digo)
}

